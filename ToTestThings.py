# -*- coding: utf-8 -*-
"""ToTestThings.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Q54G5Axjz74jvKJsXLz07KUTnKoleOOq
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from factor_analyzer import FactorAnalyzer
from factor_analyzer.factor_analyzer import calculate_bartlett_sphericity
from factor_analyzer.factor_analyzer import calculate_kmo


df1 = pd.DataFrame(np.random.randint(1, 4, size=(357, 10)), columns=['Q1','Q2','Q3','Q4','Q5','Q6','Q7','Q8','Q9','Q10'])
df2 = pd.DataFrame(np.random.randint(1, 5, size=(357, 6)), columns=['Q11','Q12','Q13','Q14','Q15','Q16'])
df3 = pd.DataFrame(np.random.randint(1, 5, size=(357, 14)), columns=['Q17','Q18','Q19','Q20','Q21','Q22','Q23','Q24','Q25','Q26','Q27','Q28','Q29','Q30'])
dfa = pd.concat([df1, df2, df3], axis=1)

df4 = pd.DataFrame(np.random.randint(1, 6, size=(2084, 10)), columns=['Q1','Q2','Q3','Q4','Q5','Q6','Q7','Q8','Q9','Q10'])
df5 = pd.DataFrame(np.random.randint(1, 6, size=(2084, 6)), columns=['Q11','Q12','Q13','Q14','Q15','Q16'])
df6 = pd.DataFrame(np.random.randint(1, 6, size=(2084, 14)), columns=['Q17','Q18','Q19','Q20','Q21','Q22','Q23','Q24','Q25','Q26','Q27','Q28','Q29','Q30'])
dfb = pd.concat([df4, df5, df6], axis=1)

df7 = pd.DataFrame(np.random.randint(2, 6, size=(721, 10)), columns=['Q1','Q2','Q3','Q4','Q5','Q6','Q7','Q8','Q9','Q10'])
df8 = pd.DataFrame(np.random.randint(2, 6, size=(721, 6)), columns=['Q11','Q12','Q13','Q14','Q15','Q16'])
df9 = pd.DataFrame(np.random.randint(3, 6, size=(721, 14)), columns=['Q17','Q18','Q19','Q20','Q21','Q22','Q23','Q24','Q25','Q26','Q27','Q28','Q29','Q30'])
dfc = pd.concat([df7, df8, df9], axis=1)

df = pd.concat([dfa, dfb, dfc], axis=0)

chi_square_value,p_value=calculate_bartlett_sphericity(df)
print(chi_square_value, p_value)

kmo_all,kmo_model=calculate_kmo(df)
print(kmo_model)

fa = FactorAnalyzer()
fa.analyze(df, 30, rotation=None)

ev, v = fa.get_eigenvalues()
print(ev)

plt.scatter(range(1,df.shape[1]+1),ev)
plt.plot(range(1,df.shape[1]+1),ev)
plt.title('Scree Plot')
plt.xlabel('Factors')
plt.ylabel('Eigenvalue')
plt.grid()
plt.show()

fa.analyze(df, 7, rotation="varimax")
print(fa.loadings)